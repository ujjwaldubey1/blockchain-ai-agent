"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.QueryParamsDesc = exports.QueryBurnTaxExemptionListDesc = exports.QueryIndicatorsDesc = exports.QueryTaxProceedsDesc = exports.QuerySeigniorageProceedsDesc = exports.QueryRewardWeightDesc = exports.QueryTaxCapsDesc = exports.QueryTaxCapDesc = exports.QueryTaxRateDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryBurnTaxExemptionListResponse = exports.QueryBurnTaxExemptionListRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryIndicatorsResponse = exports.QueryIndicatorsRequest = exports.QuerySeigniorageProceedsResponse = exports.QuerySeigniorageProceedsRequest = exports.QueryTaxProceedsResponse = exports.QueryTaxProceedsRequest = exports.QueryRewardWeightResponse = exports.QueryRewardWeightRequest = exports.QueryTaxCapsResponse = exports.QueryTaxCapsResponseItem = exports.QueryTaxCapsRequest = exports.QueryTaxCapResponse = exports.QueryTaxCapRequest = exports.QueryTaxRateResponse = exports.QueryTaxRateRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const treasury_1 = require("../../../terra/treasury/v1beta1/treasury");
const pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
const browser_headers_1 = require("browser-headers");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "terra.treasury.v1beta1";
const baseQueryTaxRateRequest = {};
exports.QueryTaxRateRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxRateRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryTaxRateRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryTaxRateRequest);
        return message;
    },
};
const baseQueryTaxRateResponse = { taxRate: "" };
exports.QueryTaxRateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taxRate !== "") {
            writer.uint32(10).string(message.taxRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxRateResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxRateResponse);
        if (object.taxRate !== undefined && object.taxRate !== null) {
            message.taxRate = String(object.taxRate);
        }
        else {
            message.taxRate = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.taxRate !== undefined && (obj.taxRate = message.taxRate);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxRateResponse);
        if (object.taxRate !== undefined && object.taxRate !== null) {
            message.taxRate = object.taxRate;
        }
        else {
            message.taxRate = "";
        }
        return message;
    },
};
const baseQueryTaxCapRequest = { denom: "" };
exports.QueryTaxCapRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapRequest);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapRequest);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        return message;
    },
};
const baseQueryTaxCapResponse = { taxCap: "" };
exports.QueryTaxCapResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taxCap !== "") {
            writer.uint32(10).string(message.taxCap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxCap = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapResponse);
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = String(object.taxCap);
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.taxCap !== undefined && (obj.taxCap = message.taxCap);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapResponse);
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = object.taxCap;
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
};
const baseQueryTaxCapsRequest = {};
exports.QueryTaxCapsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryTaxCapsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryTaxCapsRequest);
        return message;
    },
};
const baseQueryTaxCapsResponseItem = { denom: "", taxCap: "" };
exports.QueryTaxCapsResponseItem = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.taxCap !== "") {
            writer.uint32(18).string(message.taxCap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapsResponseItem);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.taxCap = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponseItem);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = String(object.taxCap);
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.taxCap !== undefined && (obj.taxCap = message.taxCap);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponseItem);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = object.taxCap;
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
};
const baseQueryTaxCapsResponse = {};
exports.QueryTaxCapsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.taxCaps) {
            exports.QueryTaxCapsResponseItem.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapsResponse);
        message.taxCaps = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxCaps.push(exports.QueryTaxCapsResponseItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponse);
        message.taxCaps = [];
        if (object.taxCaps !== undefined && object.taxCaps !== null) {
            for (const e of object.taxCaps) {
                message.taxCaps.push(exports.QueryTaxCapsResponseItem.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.taxCaps) {
            obj.taxCaps = message.taxCaps.map((e) => (e ? exports.QueryTaxCapsResponseItem.toJSON(e) : undefined));
        }
        else {
            obj.taxCaps = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponse);
        message.taxCaps = [];
        if (object.taxCaps !== undefined && object.taxCaps !== null) {
            for (const e of object.taxCaps) {
                message.taxCaps.push(exports.QueryTaxCapsResponseItem.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryRewardWeightRequest = {};
exports.QueryRewardWeightRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRewardWeightRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryRewardWeightRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryRewardWeightRequest);
        return message;
    },
};
const baseQueryRewardWeightResponse = { rewardWeight: "" };
exports.QueryRewardWeightResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rewardWeight !== "") {
            writer.uint32(10).string(message.rewardWeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRewardWeightResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardWeight = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRewardWeightResponse);
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = String(object.rewardWeight);
        }
        else {
            message.rewardWeight = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.rewardWeight !== undefined && (obj.rewardWeight = message.rewardWeight);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRewardWeightResponse);
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = object.rewardWeight;
        }
        else {
            message.rewardWeight = "";
        }
        return message;
    },
};
const baseQueryTaxProceedsRequest = {};
exports.QueryTaxProceedsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxProceedsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryTaxProceedsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryTaxProceedsRequest);
        return message;
    },
};
const baseQueryTaxProceedsResponse = {};
exports.QueryTaxProceedsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.taxProceeds) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxProceedsResponse);
        message.taxProceeds = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxProceeds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxProceedsResponse);
        message.taxProceeds = [];
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.taxProceeds) {
            obj.taxProceeds = message.taxProceeds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.taxProceeds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxProceedsResponse);
        message.taxProceeds = [];
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQuerySeigniorageProceedsRequest = {};
exports.QuerySeigniorageProceedsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQuerySeigniorageProceedsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsRequest);
        return message;
    },
};
const baseQuerySeigniorageProceedsResponse = { seigniorageProceeds: "" };
exports.QuerySeigniorageProceedsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.seigniorageProceeds !== "") {
            writer.uint32(10).string(message.seigniorageProceeds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQuerySeigniorageProceedsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seigniorageProceeds = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsResponse);
        if (object.seigniorageProceeds !== undefined && object.seigniorageProceeds !== null) {
            message.seigniorageProceeds = String(object.seigniorageProceeds);
        }
        else {
            message.seigniorageProceeds = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.seigniorageProceeds !== undefined && (obj.seigniorageProceeds = message.seigniorageProceeds);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsResponse);
        if (object.seigniorageProceeds !== undefined && object.seigniorageProceeds !== null) {
            message.seigniorageProceeds = object.seigniorageProceeds;
        }
        else {
            message.seigniorageProceeds = "";
        }
        return message;
    },
};
const baseQueryIndicatorsRequest = {};
exports.QueryIndicatorsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIndicatorsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryIndicatorsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryIndicatorsRequest);
        return message;
    },
};
const baseQueryIndicatorsResponse = { trlYear: "", trlMonth: "" };
exports.QueryIndicatorsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.trlYear !== "") {
            writer.uint32(10).string(message.trlYear);
        }
        if (message.trlMonth !== "") {
            writer.uint32(18).string(message.trlMonth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIndicatorsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.trlYear = reader.string();
                    break;
                case 2:
                    message.trlMonth = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIndicatorsResponse);
        if (object.trlYear !== undefined && object.trlYear !== null) {
            message.trlYear = String(object.trlYear);
        }
        else {
            message.trlYear = "";
        }
        if (object.trlMonth !== undefined && object.trlMonth !== null) {
            message.trlMonth = String(object.trlMonth);
        }
        else {
            message.trlMonth = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.trlYear !== undefined && (obj.trlYear = message.trlYear);
        message.trlMonth !== undefined && (obj.trlMonth = message.trlMonth);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIndicatorsResponse);
        if (object.trlYear !== undefined && object.trlYear !== null) {
            message.trlYear = object.trlYear;
        }
        else {
            message.trlYear = "";
        }
        if (object.trlMonth !== undefined && object.trlMonth !== null) {
            message.trlMonth = object.trlMonth;
        }
        else {
            message.trlMonth = "";
        }
        return message;
    },
};
const baseQueryParamsRequest = {};
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
};
const baseQueryParamsResponse = {};
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            treasury_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = treasury_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = treasury_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? treasury_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = treasury_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
};
const baseQueryBurnTaxExemptionListRequest = {};
exports.QueryBurnTaxExemptionListRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryBurnTaxExemptionListRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryBurnTaxExemptionListRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryBurnTaxExemptionListRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryBurnTaxExemptionListResponse = { addresses: "" };
exports.QueryBurnTaxExemptionListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.addresses) {
            writer.uint32(10).string(v);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryBurnTaxExemptionListResponse);
        message.addresses = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.addresses.push(reader.string());
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryBurnTaxExemptionListResponse);
        message.addresses = [];
        if (object.addresses !== undefined && object.addresses !== null) {
            for (const e of object.addresses) {
                message.addresses.push(String(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.addresses) {
            obj.addresses = message.addresses.map((e) => e);
        }
        else {
            obj.addresses = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryBurnTaxExemptionListResponse);
        message.addresses = [];
        if (object.addresses !== undefined && object.addresses !== null) {
            for (const e of object.addresses) {
                message.addresses.push(e);
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.TaxRate = this.TaxRate.bind(this);
        this.TaxCap = this.TaxCap.bind(this);
        this.TaxCaps = this.TaxCaps.bind(this);
        this.RewardWeight = this.RewardWeight.bind(this);
        this.SeigniorageProceeds = this.SeigniorageProceeds.bind(this);
        this.TaxProceeds = this.TaxProceeds.bind(this);
        this.Indicators = this.Indicators.bind(this);
        this.BurnTaxExemptionList = this.BurnTaxExemptionList.bind(this);
        this.Params = this.Params.bind(this);
    }
    TaxRate(request, metadata) {
        return this.rpc.unary(exports.QueryTaxRateDesc, exports.QueryTaxRateRequest.fromPartial(request), metadata);
    }
    TaxCap(request, metadata) {
        return this.rpc.unary(exports.QueryTaxCapDesc, exports.QueryTaxCapRequest.fromPartial(request), metadata);
    }
    TaxCaps(request, metadata) {
        return this.rpc.unary(exports.QueryTaxCapsDesc, exports.QueryTaxCapsRequest.fromPartial(request), metadata);
    }
    RewardWeight(request, metadata) {
        return this.rpc.unary(exports.QueryRewardWeightDesc, exports.QueryRewardWeightRequest.fromPartial(request), metadata);
    }
    SeigniorageProceeds(request, metadata) {
        return this.rpc.unary(exports.QuerySeigniorageProceedsDesc, exports.QuerySeigniorageProceedsRequest.fromPartial(request), metadata);
    }
    TaxProceeds(request, metadata) {
        return this.rpc.unary(exports.QueryTaxProceedsDesc, exports.QueryTaxProceedsRequest.fromPartial(request), metadata);
    }
    Indicators(request, metadata) {
        return this.rpc.unary(exports.QueryIndicatorsDesc, exports.QueryIndicatorsRequest.fromPartial(request), metadata);
    }
    BurnTaxExemptionList(request, metadata) {
        return this.rpc.unary(exports.QueryBurnTaxExemptionListDesc, exports.QueryBurnTaxExemptionListRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = {
    serviceName: "terra.treasury.v1beta1.Query",
};
exports.QueryTaxRateDesc = {
    methodName: "TaxRate",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTaxRateRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTaxRateResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTaxCapDesc = {
    methodName: "TaxCap",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTaxCapRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTaxCapResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTaxCapsDesc = {
    methodName: "TaxCaps",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTaxCapsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTaxCapsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryRewardWeightDesc = {
    methodName: "RewardWeight",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryRewardWeightRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryRewardWeightResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QuerySeigniorageProceedsDesc = {
    methodName: "SeigniorageProceeds",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QuerySeigniorageProceedsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QuerySeigniorageProceedsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTaxProceedsDesc = {
    methodName: "TaxProceeds",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTaxProceedsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTaxProceedsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryIndicatorsDesc = {
    methodName: "Indicators",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryIndicatorsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryIndicatorsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryBurnTaxExemptionListDesc = {
    methodName: "BurnTaxExemptionList",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryBurnTaxExemptionListRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryBurnTaxExemptionListResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryParamsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map