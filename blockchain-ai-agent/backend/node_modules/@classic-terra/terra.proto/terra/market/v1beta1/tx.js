"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.MsgSwapSendDesc = exports.MsgSwapDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgSwapSendResponse = exports.MsgSwapSend = exports.MsgSwapResponse = exports.MsgSwap = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const browser_headers_1 = require("browser-headers");
exports.protobufPackage = "terra.market.v1beta1";
const baseMsgSwap = { trader: "", askDenom: "" };
exports.MsgSwap = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.trader !== "") {
            writer.uint32(10).string(message.trader);
        }
        if (message.offerCoin !== undefined) {
            coin_1.Coin.encode(message.offerCoin, writer.uint32(18).fork()).ldelim();
        }
        if (message.askDenom !== "") {
            writer.uint32(26).string(message.askDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgSwap);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.trader = reader.string();
                    break;
                case 2:
                    message.offerCoin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.askDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgSwap);
        if (object.trader !== undefined && object.trader !== null) {
            message.trader = String(object.trader);
        }
        else {
            message.trader = "";
        }
        if (object.offerCoin !== undefined && object.offerCoin !== null) {
            message.offerCoin = coin_1.Coin.fromJSON(object.offerCoin);
        }
        else {
            message.offerCoin = undefined;
        }
        if (object.askDenom !== undefined && object.askDenom !== null) {
            message.askDenom = String(object.askDenom);
        }
        else {
            message.askDenom = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.trader !== undefined && (obj.trader = message.trader);
        message.offerCoin !== undefined &&
            (obj.offerCoin = message.offerCoin ? coin_1.Coin.toJSON(message.offerCoin) : undefined);
        message.askDenom !== undefined && (obj.askDenom = message.askDenom);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgSwap);
        if (object.trader !== undefined && object.trader !== null) {
            message.trader = object.trader;
        }
        else {
            message.trader = "";
        }
        if (object.offerCoin !== undefined && object.offerCoin !== null) {
            message.offerCoin = coin_1.Coin.fromPartial(object.offerCoin);
        }
        else {
            message.offerCoin = undefined;
        }
        if (object.askDenom !== undefined && object.askDenom !== null) {
            message.askDenom = object.askDenom;
        }
        else {
            message.askDenom = "";
        }
        return message;
    },
};
const baseMsgSwapResponse = {};
exports.MsgSwapResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.swapCoin !== undefined) {
            coin_1.Coin.encode(message.swapCoin, writer.uint32(10).fork()).ldelim();
        }
        if (message.swapFee !== undefined) {
            coin_1.Coin.encode(message.swapFee, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgSwapResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.swapCoin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.swapFee = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgSwapResponse);
        if (object.swapCoin !== undefined && object.swapCoin !== null) {
            message.swapCoin = coin_1.Coin.fromJSON(object.swapCoin);
        }
        else {
            message.swapCoin = undefined;
        }
        if (object.swapFee !== undefined && object.swapFee !== null) {
            message.swapFee = coin_1.Coin.fromJSON(object.swapFee);
        }
        else {
            message.swapFee = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.swapCoin !== undefined &&
            (obj.swapCoin = message.swapCoin ? coin_1.Coin.toJSON(message.swapCoin) : undefined);
        message.swapFee !== undefined &&
            (obj.swapFee = message.swapFee ? coin_1.Coin.toJSON(message.swapFee) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgSwapResponse);
        if (object.swapCoin !== undefined && object.swapCoin !== null) {
            message.swapCoin = coin_1.Coin.fromPartial(object.swapCoin);
        }
        else {
            message.swapCoin = undefined;
        }
        if (object.swapFee !== undefined && object.swapFee !== null) {
            message.swapFee = coin_1.Coin.fromPartial(object.swapFee);
        }
        else {
            message.swapFee = undefined;
        }
        return message;
    },
};
const baseMsgSwapSend = { fromAddress: "", toAddress: "", askDenom: "" };
exports.MsgSwapSend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fromAddress !== "") {
            writer.uint32(10).string(message.fromAddress);
        }
        if (message.toAddress !== "") {
            writer.uint32(18).string(message.toAddress);
        }
        if (message.offerCoin !== undefined) {
            coin_1.Coin.encode(message.offerCoin, writer.uint32(26).fork()).ldelim();
        }
        if (message.askDenom !== "") {
            writer.uint32(34).string(message.askDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgSwapSend);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fromAddress = reader.string();
                    break;
                case 2:
                    message.toAddress = reader.string();
                    break;
                case 3:
                    message.offerCoin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.askDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgSwapSend);
        if (object.fromAddress !== undefined && object.fromAddress !== null) {
            message.fromAddress = String(object.fromAddress);
        }
        else {
            message.fromAddress = "";
        }
        if (object.toAddress !== undefined && object.toAddress !== null) {
            message.toAddress = String(object.toAddress);
        }
        else {
            message.toAddress = "";
        }
        if (object.offerCoin !== undefined && object.offerCoin !== null) {
            message.offerCoin = coin_1.Coin.fromJSON(object.offerCoin);
        }
        else {
            message.offerCoin = undefined;
        }
        if (object.askDenom !== undefined && object.askDenom !== null) {
            message.askDenom = String(object.askDenom);
        }
        else {
            message.askDenom = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);
        message.toAddress !== undefined && (obj.toAddress = message.toAddress);
        message.offerCoin !== undefined &&
            (obj.offerCoin = message.offerCoin ? coin_1.Coin.toJSON(message.offerCoin) : undefined);
        message.askDenom !== undefined && (obj.askDenom = message.askDenom);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgSwapSend);
        if (object.fromAddress !== undefined && object.fromAddress !== null) {
            message.fromAddress = object.fromAddress;
        }
        else {
            message.fromAddress = "";
        }
        if (object.toAddress !== undefined && object.toAddress !== null) {
            message.toAddress = object.toAddress;
        }
        else {
            message.toAddress = "";
        }
        if (object.offerCoin !== undefined && object.offerCoin !== null) {
            message.offerCoin = coin_1.Coin.fromPartial(object.offerCoin);
        }
        else {
            message.offerCoin = undefined;
        }
        if (object.askDenom !== undefined && object.askDenom !== null) {
            message.askDenom = object.askDenom;
        }
        else {
            message.askDenom = "";
        }
        return message;
    },
};
const baseMsgSwapSendResponse = {};
exports.MsgSwapSendResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.swapCoin !== undefined) {
            coin_1.Coin.encode(message.swapCoin, writer.uint32(10).fork()).ldelim();
        }
        if (message.swapFee !== undefined) {
            coin_1.Coin.encode(message.swapFee, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgSwapSendResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.swapCoin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.swapFee = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgSwapSendResponse);
        if (object.swapCoin !== undefined && object.swapCoin !== null) {
            message.swapCoin = coin_1.Coin.fromJSON(object.swapCoin);
        }
        else {
            message.swapCoin = undefined;
        }
        if (object.swapFee !== undefined && object.swapFee !== null) {
            message.swapFee = coin_1.Coin.fromJSON(object.swapFee);
        }
        else {
            message.swapFee = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.swapCoin !== undefined &&
            (obj.swapCoin = message.swapCoin ? coin_1.Coin.toJSON(message.swapCoin) : undefined);
        message.swapFee !== undefined &&
            (obj.swapFee = message.swapFee ? coin_1.Coin.toJSON(message.swapFee) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgSwapSendResponse);
        if (object.swapCoin !== undefined && object.swapCoin !== null) {
            message.swapCoin = coin_1.Coin.fromPartial(object.swapCoin);
        }
        else {
            message.swapCoin = undefined;
        }
        if (object.swapFee !== undefined && object.swapFee !== null) {
            message.swapFee = coin_1.Coin.fromPartial(object.swapFee);
        }
        else {
            message.swapFee = undefined;
        }
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Swap = this.Swap.bind(this);
        this.SwapSend = this.SwapSend.bind(this);
    }
    Swap(request, metadata) {
        return this.rpc.unary(exports.MsgSwapDesc, exports.MsgSwap.fromPartial(request), metadata);
    }
    SwapSend(request, metadata) {
        return this.rpc.unary(exports.MsgSwapSendDesc, exports.MsgSwapSend.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = {
    serviceName: "terra.market.v1beta1.Msg",
};
exports.MsgSwapDesc = {
    methodName: "Swap",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgSwap.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgSwapResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgSwapSendDesc = {
    methodName: "SwapSend",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgSwapSend.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgSwapSendResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=tx.js.map