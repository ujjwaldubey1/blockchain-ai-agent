"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var mainnet_assets_1 = require("../mainnet.assets");
var testnet_assets_1 = require("../testnet.assets");
var mock = {
    loadAssets: __1.loadAssets,
};
describe("loadAssets()", function () {
    beforeEach(function () {
        jest.clearAllMocks();
        jest.spyOn(mock, "loadAssets");
    });
    describe("when loadAssets is called with known env, but not mainnet", function () {
        beforeEach(function () {
            mock.loadAssets({
                environment: "testnet",
            });
        });
        test("then it should call loadAssets", function () {
            expect(mock.loadAssets).toHaveBeenCalledWith({ environment: "testnet" });
        });
        test("then it should return assets", function () {
            expect(mock.loadAssets).toHaveReturnedWith(Object.values(testnet_assets_1.testnet));
        });
    });
    describe("when loadAssets is called with mainnet", function () {
        beforeEach(function () {
            mock.loadAssets({
                environment: "mainnet",
            });
        });
        test("then it should call loadAssets", function () {
            expect(mock.loadAssets).toHaveBeenCalledWith({ environment: "mainnet" });
        });
        test("then it should return assets", function () {
            expect(mock.loadAssets).toHaveReturnedWith(Object.values(mainnet_assets_1.mainnet));
        });
    });
    describe("when loadAssets is called with unknown env", function () {
        var error;
        beforeEach(function () {
            try {
                mock.loadAssets({
                    environment: "axelar",
                });
            }
            catch (_error) {
                error = _error;
            }
        });
        test("then it should call loadAssets", function () {
            expect(mock.loadAssets).toHaveBeenCalledWith({ environment: "axelar" });
        });
        test("then it should return assets", function () {
            expect(error.name).toBe("Environment not allowed");
            expect(error.message).toBe("Provided environment axelar not in local|devnet|testnet|mainnet");
        });
    });
    describe("when loadAssets is called with empty env", function () {
        var error;
        beforeEach(function () {
            try {
                mock.loadAssets({
                    environment: "",
                });
            }
            catch (_error) {
                error = _error;
            }
        });
        test("then it should call loadAssets", function () {
            expect(mock.loadAssets).toHaveBeenCalledWith({ environment: "" });
        });
        test("then it should return assets", function () {
            expect(error.name).toBe("Environment not allowed");
            expect(error.message).toBe("Provided environment undefined not in local|devnet|testnet|mainnet");
        });
    });
});
//# sourceMappingURL=loadAssets.spec.js.map