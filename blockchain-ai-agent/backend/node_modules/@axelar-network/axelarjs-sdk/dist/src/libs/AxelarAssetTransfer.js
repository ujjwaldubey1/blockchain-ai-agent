"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxelarAssetTransfer = void 0;
const uuid_1 = require("uuid");
const types_1 = require("../services/types");
const services_1 = require("../services");
const utils_1 = require("../utils");
const constants_1 = require("../constants");
class AxelarAssetTransfer {
    constructor(config) {
        const configs = (0, constants_1.getConfigs)(config.environment);
        this.environment = config.environment;
        this.resourceUrl = configs.resourceUrl;
        // handle resource url overwrite (for tests)
        if (config.overwriteResourceUrl)
            this.resourceUrl = config.overwriteResourceUrl;
        this.api = new services_1.RestService(this.resourceUrl);
    }
    getDepositAddress(fromChain, toChain, destinationAddress, asset, options) {
        return __awaiter(this, void 0, void 0, function* () {
            // use trace ID sent in by invoking user, or otherwise generate a new one
            const traceId = (options === null || options === void 0 ? void 0 : options._traceId) || (0, uuid_1.v4)();
            // verify destination address format
            const isDestinationAddressValid = (0, utils_1.validateDestinationAddressByChainName)(toChain, destinationAddress, this.environment);
            if (!isDestinationAddressValid)
                throw new Error(`Invalid destination address for chain ${toChain}`);
            // auth/rate limiting
            const wallet = (0, utils_1.createWallet)();
            // sign validation message
            const { validationMsg } = yield this.getOneTimeCode(wallet.address, traceId);
            const signature = yield wallet.signMessage(validationMsg);
            // get room id to listen for deposit address (to be extracted from link event)
            const roomId = yield this.getInitRoomId(fromChain, toChain, destinationAddress, asset, wallet.address, signature, traceId);
            // extract deposit address from link event
            const newRoomId = yield this.getLinkEvent(roomId);
            const depositAddress = this.extractDepositAddress(newRoomId);
            return depositAddress;
        });
    }
    getOneTimeCode(signerAddress, traceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const otc = yield this.api
                .get(`${types_1.CLIENT_API_GET_OTC}?publicAddress=${signerAddress}`, traceId)
                .then((response) => response)
                .catch((error) => {
                throw error;
            });
            return otc;
        });
    }
    getInitRoomId(fromChain, toChain, destinationAddress, asset, publicAddress, signature, traceId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                fromChain,
                toChain,
                destinationAddress,
                asset,
                publicAddress,
                signature,
            };
            const response = yield this.api
                .post(types_1.CLIENT_API_POST_TRANSFER_ASSET, payload, traceId)
                .then((response) => response)
                .catch((error) => {
                throw error;
            });
            const roomId = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.roomId;
            return roomId;
        });
    }
    getLinkEvent(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { newRoomId } = yield this.getSocketService()
                .joinRoomAndWaitForEvent(roomId)
                .catch((error) => {
                throw error;
            });
            return newRoomId;
        });
    }
    getSocketService() {
        return new services_1.SocketService(this.resourceUrl);
    }
    extractDepositAddress(roomId) {
        var _a;
        return (_a = JSON.parse(roomId)) === null || _a === void 0 ? void 0 : _a.depositAddress;
    }
}
exports.AxelarAssetTransfer = AxelarAssetTransfer;
//# sourceMappingURL=AxelarAssetTransfer.js.map