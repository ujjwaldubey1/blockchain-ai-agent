"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxelarAssetTransfer = void 0;
var uuid_1 = require("uuid");
var types_1 = require("../services/types");
var services_1 = require("../services");
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var AxelarAssetTransfer = /** @class */ (function () {
    function AxelarAssetTransfer(config) {
        var configs = (0, constants_1.getConfigs)(config.environment);
        this.environment = config.environment;
        this.resourceUrl = configs.resourceUrl;
        // handle resource url overwrite (for tests)
        if (config.overwriteResourceUrl)
            this.resourceUrl = config.overwriteResourceUrl;
        this.api = new services_1.RestService(this.resourceUrl);
        this.socket = new services_1.SocketService(this.resourceUrl);
    }
    AxelarAssetTransfer.prototype.getDepositAddress = function (fromChain, toChain, destinationAddress, asset, options) {
        return __awaiter(this, void 0, void 0, function () {
            var traceId, isDestinationAddressValid, wallet, validationMsg, signature, roomId, newRoomId, depositAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        traceId = (options === null || options === void 0 ? void 0 : options._traceId) || (0, uuid_1.v4)();
                        isDestinationAddressValid = (0, utils_1.validateDestinationAddressByChainName)(toChain, destinationAddress, this.environment);
                        if (!isDestinationAddressValid)
                            throw new Error("Invalid destination address for chain ".concat(toChain));
                        wallet = (0, utils_1.createWallet)();
                        return [4 /*yield*/, this.getOneTimeCode(wallet.address, traceId)];
                    case 1:
                        validationMsg = (_a.sent()).validationMsg;
                        return [4 /*yield*/, wallet.signMessage(validationMsg)];
                    case 2:
                        signature = _a.sent();
                        return [4 /*yield*/, this.getInitRoomId(fromChain, toChain, destinationAddress, asset, wallet.address, signature, traceId)];
                    case 3:
                        roomId = _a.sent();
                        return [4 /*yield*/, this.getLinkEvent(roomId)];
                    case 4:
                        newRoomId = _a.sent();
                        depositAddress = this.extractDepositAddress(newRoomId);
                        return [2 /*return*/, depositAddress];
                }
            });
        });
    };
    AxelarAssetTransfer.prototype.getOneTimeCode = function (signerAddress, traceId) {
        return __awaiter(this, void 0, void 0, function () {
            var otc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api
                            .get("".concat(types_1.CLIENT_API_GET_OTC, "?publicAddress=").concat(signerAddress), traceId)
                            .then(function (response) { return response; })
                            .catch(function (error) {
                            throw error;
                        })];
                    case 1:
                        otc = _a.sent();
                        return [2 /*return*/, otc];
                }
            });
        });
    };
    AxelarAssetTransfer.prototype.getInitRoomId = function (fromChain, toChain, destinationAddress, asset, publicAddress, signature, traceId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var payload, response, roomId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        payload = {
                            fromChain: fromChain,
                            toChain: toChain,
                            destinationAddress: destinationAddress,
                            asset: asset,
                            publicAddress: publicAddress,
                            signature: signature,
                        };
                        return [4 /*yield*/, this.api
                                .post(types_1.CLIENT_API_POST_TRANSFER_ASSET, payload, traceId)
                                .then(function (response) { return response; })
                                .catch(function (error) {
                                throw error;
                            })];
                    case 1:
                        response = _b.sent();
                        roomId = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.roomId;
                        return [2 /*return*/, roomId];
                }
            });
        });
    };
    AxelarAssetTransfer.prototype.getLinkEvent = function (roomId) {
        return __awaiter(this, void 0, void 0, function () {
            var newRoomId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.socket
                            .joinRoomAndWaitForEvent(roomId)
                            .catch(function (error) {
                            throw error;
                        })];
                    case 1:
                        newRoomId = (_a.sent()).newRoomId;
                        return [2 /*return*/, newRoomId];
                }
            });
        });
    };
    AxelarAssetTransfer.prototype.extractDepositAddress = function (roomId) {
        var _a;
        return (_a = JSON.parse(roomId)) === null || _a === void 0 ? void 0 : _a.depositAddress;
    };
    return AxelarAssetTransfer;
}());
exports.AxelarAssetTransfer = AxelarAssetTransfer;
//# sourceMappingURL=AxelarAssetTransfer.js.map