"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var hardhat_1 = __importStar(require("hardhat"));
require("@nomiclabs/hardhat-ethers");
var AxelarGateway_1 = require("../AxelarGateway");
var types_1 = require("../types");
var GatewayTx_1 = require("../GatewayTx");
// Deploying contract takes longer than jest's default value (5s)
jest.setTimeout(30000);
describe("AxelarGateway", function () {
    var MOCK_DESTINATION_CONTRACT_ADDRESS = "0x0000000000000000000000000000000000000001";
    var MOCK_DESTINATION_ACCOUNT_ADDRESS = "0x0000000000000000000000000000000000000002";
    var gatewayContract;
    var erc20Contract;
    var axelarGateway;
    var signer;
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        var AxelarGatewayContract, ERC20Contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, hardhat_1.default.ethers.getContractFactory("MinimalAxelarGateway")];
                case 1:
                    AxelarGatewayContract = _a.sent();
                    return [4 /*yield*/, hardhat_1.default.ethers.getContractFactory("ERC20")];
                case 2:
                    ERC20Contract = _a.sent();
                    return [4 /*yield*/, AxelarGatewayContract.deploy()];
                case 3:
                    gatewayContract = _a.sent();
                    return [4 /*yield*/, ERC20Contract.deploy("Panty", "PNT")];
                case 4:
                    erc20Contract = _a.sent();
                    return [4 /*yield*/, gatewayContract.deployed()];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, erc20Contract.deployed()];
                case 6:
                    _a.sent();
                    axelarGateway = new AxelarGateway_1.AxelarGateway(gatewayContract.address, hardhat_1.ethers.provider);
                    return [4 /*yield*/, hardhat_1.default.ethers.getSigners().then(function (signers) { return signers[0]; })];
                case 7:
                    signer = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `createCallContractTx` function without revert and `CallContract` event is emitted correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var bytesPayload, gatewayTx, tx, receipt, eventLogs, signerAddress, eventId, hashedBytesPayload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bytesPayload = hardhat_1.ethers.utils.formatBytes32String("test");
                    return [4 /*yield*/, axelarGateway.createCallContractTx({
                            destinationContractAddress: MOCK_DESTINATION_CONTRACT_ADDRESS,
                            destinationChain: types_1.EvmChain.AVALANCHE,
                            payload: bytesPayload,
                        })];
                case 1:
                    gatewayTx = _a.sent();
                    expect(gatewayTx).toBeInstanceOf(GatewayTx_1.GatewayTx);
                    return [4 /*yield*/, gatewayTx.send(signer)];
                case 2:
                    tx = _a.sent();
                    return [4 /*yield*/, tx.wait()];
                case 3:
                    receipt = _a.sent();
                    expect(receipt.transactionHash).toBeDefined();
                    eventLogs = receipt.logs[0].topics;
                    return [4 /*yield*/, signer
                            .getAddress()
                            .then(function (address) { return address.toLowerCase(); })];
                case 4:
                    signerAddress = _a.sent();
                    eventId = hardhat_1.ethers.utils.id("ContractCall(address,string,string,bytes32,bytes)");
                    hashedBytesPayload = hardhat_1.ethers.utils.keccak256(bytesPayload);
                    expect(eventLogs).toEqual([
                        eventId,
                        hardhat_1.ethers.utils.hexZeroPad(signerAddress, 32),
                        hardhat_1.ethers.utils.id(types_1.EvmChain.AVALANCHE),
                        hashedBytesPayload,
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `createCallContractWithTokenTx` function without revert and `CallContractWithToken` event is emitted correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var bytesPayload, gatewayTx, tx, receipt, eventLogs, signerAddress, eventId, hashedBytesPayload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bytesPayload = hardhat_1.ethers.utils.formatBytes32String("test");
                    return [4 /*yield*/, axelarGateway.createCallContractWithTokenTx({
                            destinationContractAddress: MOCK_DESTINATION_CONTRACT_ADDRESS,
                            destinationChain: types_1.EvmChain.AVALANCHE,
                            payload: bytesPayload,
                            symbol: "PNT",
                            amount: "1",
                        })];
                case 1:
                    gatewayTx = _a.sent();
                    expect(gatewayTx).toBeInstanceOf(GatewayTx_1.GatewayTx);
                    return [4 /*yield*/, gatewayTx.send(signer)];
                case 2:
                    tx = _a.sent();
                    return [4 /*yield*/, tx.wait()];
                case 3:
                    receipt = _a.sent();
                    expect(receipt.transactionHash).toBeDefined();
                    eventLogs = receipt.logs[0].topics;
                    return [4 /*yield*/, signer
                            .getAddress()
                            .then(function (address) { return address.toLowerCase(); })];
                case 4:
                    signerAddress = _a.sent();
                    eventId = hardhat_1.ethers.utils.id("ContractCallWithToken(address,string,string,bytes32,bytes,string,uint256)");
                    hashedBytesPayload = hardhat_1.ethers.utils.keccak256(bytesPayload);
                    expect(eventLogs).toEqual([
                        eventId,
                        hardhat_1.ethers.utils.hexZeroPad(signerAddress, 32),
                        hardhat_1.ethers.utils.id(types_1.EvmChain.AVALANCHE),
                        hashedBytesPayload,
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `createSendTokenTx` event without revert and `TokenSent` event is emitted correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var gatewayTx, tx, receipt, eventLogs, signerAddress, eventId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axelarGateway.createSendTokenTx({
                        destinationAddress: MOCK_DESTINATION_ACCOUNT_ADDRESS,
                        destinationChain: types_1.EvmChain.AVALANCHE,
                        amount: "1",
                        symbol: "PNT",
                    })];
                case 1:
                    gatewayTx = _a.sent();
                    expect(gatewayTx).toBeInstanceOf(GatewayTx_1.GatewayTx);
                    return [4 /*yield*/, gatewayTx.send(signer)];
                case 2:
                    tx = _a.sent();
                    return [4 /*yield*/, tx.wait()];
                case 3:
                    receipt = _a.sent();
                    expect(receipt.transactionHash).toBeDefined();
                    eventLogs = receipt.logs[0].topics;
                    return [4 /*yield*/, signer
                            .getAddress()
                            .then(function (address) { return address.toLowerCase(); })];
                case 4:
                    signerAddress = _a.sent();
                    eventId = hardhat_1.ethers.utils.id("TokenSent(address,string,string,string,uint256)");
                    expect(eventLogs).toEqual([
                        eventId,
                        hardhat_1.ethers.utils.hexZeroPad(signerAddress, 32),
                        hardhat_1.ethers.utils.id(types_1.EvmChain.AVALANCHE),
                        hardhat_1.ethers.utils.id(MOCK_DESTINATION_ACCOUNT_ADDRESS),
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `createApproveTx` to increase allowance correctly given `tokenAddress` is ERC20 contract", function () { return __awaiter(void 0, void 0, void 0, function () {
        var tx, receipt, signerAddress, allowance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axelarGateway.createApproveTx({
                        tokenAddress: erc20Contract.address,
                        amount: "1",
                    })];
                case 1:
                    tx = _a.sent();
                    expect(tx).toBeInstanceOf(GatewayTx_1.GatewayTx);
                    return [4 /*yield*/, tx.send(signer).then(function (tx) { return tx.wait(); })];
                case 2:
                    receipt = _a.sent();
                    return [4 /*yield*/, signer.getAddress()];
                case 3:
                    signerAddress = _a.sent();
                    return [4 /*yield*/, axelarGateway.getAllowance(erc20Contract.address, signerAddress)];
                case 4:
                    allowance = _a.sent();
                    expect(receipt.transactionHash).toBeDefined();
                    expect(allowance.toString()).toBe("1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `createApproveTx` to increase with MaxUint256 given amount is undefined", function () { return __awaiter(void 0, void 0, void 0, function () {
        var tx, receipt, signerAddress, allowance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axelarGateway.createApproveTx({
                        tokenAddress: erc20Contract.address,
                    })];
                case 1:
                    tx = _a.sent();
                    expect(tx).toBeInstanceOf(GatewayTx_1.GatewayTx);
                    return [4 /*yield*/, tx.send(signer).then(function (tx) { return tx.wait(); })];
                case 2:
                    receipt = _a.sent();
                    return [4 /*yield*/, signer.getAddress()];
                case 3:
                    signerAddress = _a.sent();
                    return [4 /*yield*/, axelarGateway.getAllowance(erc20Contract.address, signerAddress)];
                case 4:
                    allowance = _a.sent();
                    expect(receipt.transactionHash).toBeDefined();
                    expect(allowance.toString()).toBe(hardhat_1.ethers.constants.MaxUint256.toString());
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `getTokenAddress` and get result correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var address, expectedAddress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axelarGateway
                        .getTokenAddress("PNT")
                        .then(function (_address) { return _address.toLowerCase(); })];
                case 1:
                    address = _a.sent();
                    expectedAddress = hardhat_1.ethers.utils
                        .formatBytes32String("PNT")
                        .slice(0, 42)
                        .toLowerCase();
                    expect(address).toBe(expectedAddress);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `isTokenFrozen` and get result correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var isIceFrozen, isBoiledEggFrozen;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axelarGateway.isTokenFrozen("ICE")];
                case 1:
                    isIceFrozen = _a.sent();
                    expect(isIceFrozen).toBe(true);
                    return [4 /*yield*/, axelarGateway.isTokenFrozen("BOILED_EGG")];
                case 2:
                    isBoiledEggFrozen = _a.sent();
                    expect(isBoiledEggFrozen).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should call `isCommandExecuted` and get result correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var executedCommandId, unexecuteCommandId, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    executedCommandId = hardhat_1.ethers.utils.formatBytes32String("executed");
                    unexecuteCommandId = hardhat_1.ethers.utils.formatBytes32String("unexecute");
                    _a = expect;
                    return [4 /*yield*/, axelarGateway.isCommandExecuted(executedCommandId)];
                case 1:
                    _a.apply(void 0, [_c.sent()]).toBe(true);
                    _b = expect;
                    return [4 /*yield*/, axelarGateway.isCommandExecuted(unexecuteCommandId)];
                case 2:
                    _b.apply(void 0, [_c.sent()]).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=axelarGateway.test.js.map