import { BigNumber } from "ethers";
import { EvmChain } from "../../types";
export declare const uuidStub: () => string;
export declare const ethAddressStub: () => string;
export declare const terraAddressStub: () => string;
export declare const otcStub: () => {
    otc: string;
    validationMsg: string;
};
export declare const apiErrorStub: () => {
    message: string;
    uncaught: boolean;
    fullMessage: string;
};
export declare const roomIdStub: () => {
    roomId: string;
};
export declare const depositAddressPayloadStub: () => {
    fromChain: string;
    toChain: string;
    asset: string;
    publicAddress: string;
    destinationAddress: string;
    signature: string;
};
export declare const linkEventStub: () => {
    Type: string;
    Attributes: {
        asset: string;
        depositAddress: string;
        destinationAddress: string;
        destinationChain: string;
        module: string;
        sourceChain: string;
    };
    Height: number;
    newRoomId: string;
};
export declare const newRoomIdStub: () => string;
export declare const executeParamsStub: () => {
    commandId: string;
    destinationChain: EvmChain;
    destinationContractAddress: string;
    isContractCallWithToken: boolean;
    payload: string;
    sourceAddress: string;
    sourceChain: EvmChain;
    amount: string;
    symbol: string;
};
export declare const contractReceiptStub: () => {
    transactionHash: string;
    blockHash: string;
    from: string;
    to: string;
    confirmations: number;
    gasUsed: BigNumber;
    effectiveGasPrice: BigNumber;
    cumulativeGasUsed: BigNumber;
    logs: never[];
    logsBloom: string;
    contractAddress: string;
    byzantium: boolean;
    blockNumber: number;
    type: number;
    transactionIndex: number;
};
export declare const axelarTxResponseStub: (rawLog?: any) => {
    height: number;
    code: number;
    transactionHash: string;
    rawLog: any;
    gasUsed: number;
    gasWanted: number;
};
export declare const batchedCommandResponseStub: (executeData?: string) => {
    executeData: string;
    id: string;
    status: number;
    data: string;
    keyId: string;
    signature: never[];
    prevBatchedCommandsId: string;
    commandIds: never[];
};
//# sourceMappingURL=index.d.ts.map