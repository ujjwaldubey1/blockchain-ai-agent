import { RestService } from "../services";
import { AxelarQueryAPIConfig, Environment, FeeInfoResponse, TransferFeeResponse } from "./types";
export declare class AxelarQueryAPI {
    readonly environment: Environment;
    readonly lcdApi: RestService;
    readonly rpcApi: RestService;
    readonly axelarCachingServiceApi: RestService;
    readonly axelarRpcUrl: string;
    readonly axelarLcdUrl: string;
    readonly axelarCachingServiceUrl: string;
    constructor(config: AxelarQueryAPIConfig);
    /**
     * Gets the fee for a chain and asset
     * example testnet query: https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/fee?chain=ethereum&asset=uusd
     * @param chainName
     * @param assetDenom
     * @returns
     */
    getFeeForChainAndAsset(chainName: string, assetDenom: string): Promise<FeeInfoResponse>;
    /**
     * Gest the transfer fee for a given transaction
     * example testnet query: "https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/transfer_fee?source_chain=ethereum&destination_chain=terra&amount=100000000uusd"
     * @param sourceChainName
     * @param destinationChainName
     * @param assetDenom
     * @param amountInDenom
     * @returns
     */
    getTransferFee(sourceChainName: string, destinationChainName: string, assetDenom: string, amountInDenom: number): Promise<TransferFeeResponse>;
    /**
     * Gets the gas price for a destination chain to be paid to the gas receiver on a source chain
     * example testnet query: https://testnet.api.gmp.axelarscan.io/?method=getGasPrice&destinationChain=ethereum&sourceChain=avalanche&sourceTokenAddress=0x43F4600b552089655645f8c16D86A5a9Fa296bc3&sourceTokenSymbol=UST
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceChainTokenAddress
     * @param sourceChainTokenSymbol
     * @returns
     */
    getGasPrice(sourceChainName: string, destinationChainName: string, sourceChainTokenAddress: string, sourceChainTokenSymbol: string): Promise<number>;
    /**
     * Get the denom for an asset given its symbol on a chain
     * @param symbol
     * @param chainName
     * @returns
     */
    getDenomFromSymbol(symbol: string, chainName: string): string | null;
    /**
     * Get the symbol for an asset on a given chain given its denom
     * @param denom
     * @param chainName
     * @returns
     */
    getSymbolFromDenom(denom: string, chainName: string): string | null | undefined;
}
//# sourceMappingURL=AxelarQueryAPI.d.ts.map