"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxelarQueryAPI = void 0;
const assets_1 = require("../assets");
const constants_1 = require("../constants");
const services_1 = require("../services");
const ethers_1 = require("ethers");
const contract_1 = require("./TransactionRecoveryApi/constants/contract");
class AxelarQueryAPI {
    constructor(config) {
        const { axelarLcdUrl, axelarRpcUrl, environment } = config;
        const links = (0, constants_1.getConfigs)(environment);
        this.axelarRpcUrl = axelarRpcUrl || links.axelarRpcUrl;
        this.axelarLcdUrl = axelarLcdUrl || links.axelarLcdUrl;
        this.axelarCachingServiceUrl = links.axelarCachingServiceUrl;
        this.environment = environment;
        this.lcdApi = new services_1.RestService(this.axelarLcdUrl);
        this.rpcApi = new services_1.RestService(this.axelarRpcUrl);
        this.axelarCachingServiceApi = new services_1.RestService(this.axelarCachingServiceUrl);
    }
    /**
     * Gets the fee for a chain and asset
     * example testnet query: https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/fee?chain=ethereum&asset=uusd
     * @param chainName
     * @param assetDenom
     * @returns
     */
    getFeeForChainAndAsset(chainName, assetDenom) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let queryEndpoint = `/axelar/nexus/v1beta1/fee`;
                queryEndpoint += `?chain=${chainName === null || chainName === void 0 ? void 0 : chainName.toLowerCase()}`;
                queryEndpoint += `&asset=${assetDenom}`;
                return (yield this.lcdApi.get(queryEndpoint));
            }
            catch (e) {
                throw e;
            }
        });
    }
    /**
     * Gest the transfer fee for a given transaction
     * example testnet query: "https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/transfer_fee?source_chain=ethereum&destination_chain=terra&amount=100000000uusd"
     * @param sourceChainName
     * @param destinationChainName
     * @param assetDenom
     * @param amountInDenom
     * @returns
     */
    getTransferFee(sourceChainName, destinationChainName, assetDenom, amountInDenom) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let queryEndpoint = `/axelar/nexus/v1beta1/transfer_fee`;
                queryEndpoint += `?source_chain=${sourceChainName === null || sourceChainName === void 0 ? void 0 : sourceChainName.toLowerCase()}`;
                queryEndpoint += `&destination_chain=${destinationChainName === null || destinationChainName === void 0 ? void 0 : destinationChainName.toLowerCase()}`;
                queryEndpoint += `&amount=${amountInDenom === null || amountInDenom === void 0 ? void 0 : amountInDenom.toString()}${assetDenom}`;
                return this.lcdApi.get(queryEndpoint);
            }
            catch (e) {
                throw e;
            }
        });
    }
    /**
     * Gets the gas price for a destination chain to be paid to the gas receiver on a source chain
     * example testnet query: https://testnet.api.gmp.axelarscan.io/?method=getGasPrice&destinationChain=ethereum&sourceChain=avalanche&sourceTokenAddress=0x43F4600b552089655645f8c16D86A5a9Fa296bc3&sourceTokenSymbol=UST
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceChainTokenSymbol
     * @param estimatedGasUsed
     * @returns
     */
    getGasInfo(sourceChainName, destinationChainName, sourceChainTokenSymbol) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams({
                method: "getGasPrice",
                destinationChain: destinationChainName,
                sourceChain: sourceChainName,
                sourceTokenSymbol: sourceChainTokenSymbol,
            });
            return this.axelarCachingServiceApi.get(`?${params}`).then((resp) => resp.result);
        });
    }
    /**
     * Calculate estimated gas amount to pay for the gas receiver contract.
     *
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceChainTokenSymbol
     * @param estimatedGasUsed (Optional) An estimated gas amount required to execute `executeWithToken` function. The default value is 700000 which sufficients for most transaction.
     * @returns
     */
    estimateGasFee(sourceChainName, destinationChainName, sourceChainTokenSymbol, estimatedGasUsed = contract_1.DEFAULT_ESTIMATED_GAS) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGasInfo(sourceChainName, destinationChainName, sourceChainTokenSymbol);
            const { gas_price: gasPrice } = response.source_token;
            return ethers_1.ethers.utils.parseEther(gasPrice).mul(estimatedGasUsed).toString();
        });
    }
    /**
     * Get the denom for an asset given its symbol on a chain
     * @param symbol
     * @param chainName
     * @returns
     */
    getDenomFromSymbol(symbol, chainName) {
        const allAssets = (0, assets_1.loadAssets)({ environment: this.environment });
        const assetConfig = allAssets.find((assetConfig) => { var _a; return ((_a = assetConfig.chain_aliases[chainName]) === null || _a === void 0 ? void 0 : _a.assetSymbol) === symbol; });
        if (!assetConfig)
            return null;
        return assetConfig === null || assetConfig === void 0 ? void 0 : assetConfig.common_key[this.environment];
    }
    /**
     * Get the symbol for an asset on a given chain given its denom
     * @param denom
     * @param chainName
     * @returns
     */
    getSymbolFromDenom(denom, chainName) {
        const allAssets = (0, assets_1.loadAssets)({ environment: this.environment });
        const assetConfig = allAssets.find((assetConfig) => assetConfig.common_key[this.environment] === denom);
        if (!assetConfig)
            return null;
        return assetConfig.chain_aliases[chainName].assetSymbol;
    }
}
exports.AxelarQueryAPI = AxelarQueryAPI;
//# sourceMappingURL=AxelarQueryAPI.js.map