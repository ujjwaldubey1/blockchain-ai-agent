"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxelarQueryAPI = void 0;
var assets_1 = require("../assets");
var constants_1 = require("../constants");
var services_1 = require("../services");
var AxelarQueryAPI = /** @class */ (function () {
    function AxelarQueryAPI(config) {
        var axelarLcdUrl = config.axelarLcdUrl, axelarRpcUrl = config.axelarRpcUrl, environment = config.environment;
        var links = (0, constants_1.getConfigs)(environment);
        this.axelarRpcUrl = axelarRpcUrl || links.axelarRpcUrl;
        this.axelarLcdUrl = axelarLcdUrl || links.axelarLcdUrl;
        this.axelarCachingServiceUrl = links.axelarCachingServiceUrl;
        this.environment = environment;
        this.lcdApi = new services_1.RestService(this.axelarLcdUrl);
        this.rpcApi = new services_1.RestService(this.axelarRpcUrl);
        this.axelarCachingServiceApi = new services_1.RestService(this.axelarCachingServiceUrl);
    }
    /**
     * Gets the fee for a chain and asset
     * example testnet query: https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/fee?chain=ethereum&asset=uusd
     * @param chainName
     * @param assetDenom
     * @returns
     */
    AxelarQueryAPI.prototype.getFeeForChainAndAsset = function (chainName, assetDenom) {
        return __awaiter(this, void 0, void 0, function () {
            var queryEndpoint, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        queryEndpoint = "/axelar/nexus/v1beta1/fee";
                        queryEndpoint += "?chain=".concat(chainName === null || chainName === void 0 ? void 0 : chainName.toLowerCase());
                        queryEndpoint += "&asset=".concat(assetDenom);
                        return [4 /*yield*/, this.lcdApi.get(queryEndpoint)];
                    case 1: return [2 /*return*/, (_a.sent())];
                    case 2:
                        e_1 = _a.sent();
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gest the transfer fee for a given transaction
     * example testnet query: "https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/transfer_fee?source_chain=ethereum&destination_chain=terra&amount=100000000uusd"
     * @param sourceChainName
     * @param destinationChainName
     * @param assetDenom
     * @param amountInDenom
     * @returns
     */
    AxelarQueryAPI.prototype.getTransferFee = function (sourceChainName, destinationChainName, assetDenom, amountInDenom) {
        return __awaiter(this, void 0, void 0, function () {
            var queryEndpoint, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        queryEndpoint = "/axelar/nexus/v1beta1/transfer_fee";
                        queryEndpoint += "?source_chain=".concat(sourceChainName === null || sourceChainName === void 0 ? void 0 : sourceChainName.toLowerCase());
                        queryEndpoint += "&destination_chain=".concat(destinationChainName === null || destinationChainName === void 0 ? void 0 : destinationChainName.toLowerCase());
                        queryEndpoint += "&amount=".concat(amountInDenom === null || amountInDenom === void 0 ? void 0 : amountInDenom.toString()).concat(assetDenom);
                        return [4 /*yield*/, this.lcdApi.get(queryEndpoint)];
                    case 1: return [2 /*return*/, (_a.sent())];
                    case 2:
                        e_2 = _a.sent();
                        throw e_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the gas price for a destination chain to be paid to the gas receiver on a source chain
     * example testnet query: https://testnet.api.gmp.axelarscan.io/?method=getGasPrice&destinationChain=ethereum&sourceChain=avalanche&sourceTokenAddress=0x43F4600b552089655645f8c16D86A5a9Fa296bc3&sourceTokenSymbol=UST
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceChainTokenAddress
     * @param sourceChainTokenSymbol
     * @returns
     */
    AxelarQueryAPI.prototype.getGasPrice = function (sourceChainName, destinationChainName, sourceChainTokenAddress, sourceChainTokenSymbol) {
        return __awaiter(this, void 0, void 0, function () {
            var queryEndpoint, response, result, dest, exponent, destPrice, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        queryEndpoint = "";
                        queryEndpoint += "?method=getGasPrice";
                        queryEndpoint += "&destinationChain=".concat(destinationChainName);
                        queryEndpoint += "&sourceChain=".concat(sourceChainName);
                        queryEndpoint += "&sourceTokenAddress=".concat(sourceChainTokenAddress);
                        queryEndpoint += "&sourceTokenSymbol=".concat(sourceChainTokenSymbol);
                        return [4 /*yield*/, this.axelarCachingServiceApi.get(queryEndpoint)];
                    case 1:
                        response = _a.sent();
                        result = response.result;
                        dest = result.destination_native_token;
                        exponent = 1e18;
                        destPrice = exponent * dest.gas_price * dest.token_price.usd;
                        return [2 /*return*/, destPrice / result.source_token.token_price.usd];
                    case 2:
                        e_3 = _a.sent();
                        throw e_3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the denom for an asset given its symbol on a chain
     * @param symbol
     * @param chainName
     * @returns
     */
    AxelarQueryAPI.prototype.getDenomFromSymbol = function (symbol, chainName) {
        var allAssets = (0, assets_1.loadAssets)({ environment: this.environment });
        var assetConfig = allAssets.find(function (assetConfig) { var _a; return ((_a = assetConfig.chain_aliases[chainName]) === null || _a === void 0 ? void 0 : _a.assetSymbol) === symbol; });
        if (!assetConfig)
            return null;
        return assetConfig === null || assetConfig === void 0 ? void 0 : assetConfig.common_key[this.environment];
    };
    /**
     * Get the symbol for an asset on a given chain given its denom
     * @param denom
     * @param chainName
     * @returns
     */
    AxelarQueryAPI.prototype.getSymbolFromDenom = function (denom, chainName) {
        var _this = this;
        var allAssets = (0, assets_1.loadAssets)({ environment: this.environment });
        var assetConfig = allAssets.find(function (assetConfig) { return assetConfig.common_key[_this.environment] === denom; });
        if (!assetConfig)
            return null;
        return assetConfig.chain_aliases[chainName].assetSymbol;
    };
    return AxelarQueryAPI;
}());
exports.AxelarQueryAPI = AxelarQueryAPI;
//# sourceMappingURL=AxelarQueryAPI.js.map