export declare enum Environment {
    DEVNET = "devnet",
    TESTNET = "testnet",
    MAINNET = "mainnet"
}
export declare enum EvmChain {
    ETHEREUM = "ethereum",
    AVALANCHE = "avalanche",
    FANTOM = "fantom",
    POLYGON = "polygon",
    MOONBEAM = "moonbeam"
}
export declare enum CosmosChain {
    AXELAR = "axelar",
    COSMOSHUB = "cosmoshub",
    JUNO = "juno",
    OSMOSIS = "osmosis",
    TERRA = "terra"
}
export interface SendTokenArgs {
    destinationChain: EvmChain | CosmosChain;
    destinationAddress: string;
    symbol: string;
    amount: string;
}
export interface ApproveTxArgs {
    tokenAddress: string;
    amount?: string;
}
export interface CallContractTxArgs {
    destinationChain: EvmChain | CosmosChain;
    destinationContractAddress: string;
    payload: string;
}
export interface CallContractWithTokenTxArgs extends CallContractTxArgs {
    symbol: string;
    amount: string;
}
export interface TxOption {
    gasLimit?: string;
    gasPrice?: string;
    maxFeePerGas: string;
    maxPriorityFeePerGas: string;
}
export declare type AxelarAssetTransferConfig = {
    environment: Environment;
    auth?: "local" | "metamask";
    overwriteResourceUrl?: string;
};
export declare type AxelarQueryAPIConfig = {
    axelarRpcUrl?: string;
    axelarLcdUrl?: string;
    environment: Environment;
};
export interface FeeInfoResponse {
    fee_info: {
        chain: string;
        asset: string;
        fee_rate: string;
        min_fee: string;
        max_fee: string;
    };
}
export interface TransferFeeResponse {
    fee: {
        denom: string;
        amount: string;
    };
}
//# sourceMappingURL=index.d.ts.map