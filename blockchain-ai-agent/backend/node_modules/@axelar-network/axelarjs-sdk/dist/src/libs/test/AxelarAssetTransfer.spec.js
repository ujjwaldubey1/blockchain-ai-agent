"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../..");
var AxelarAssetTransfer_1 = require("../AxelarAssetTransfer");
var types_1 = require("../types");
var stubs_1 = require("./stubs");
describe("AxelarAssetTransfer", function () {
    beforeEach(function () {
        jest.clearAllMocks();
    });
    describe("on init", function () {
        var bridge;
        beforeEach(function () {
            bridge = new AxelarAssetTransfer_1.AxelarAssetTransfer({
                environment: types_1.Environment.TESTNET,
            });
        });
        describe("AxelarAssetTransfer", function () {
            it("should be defined", function () {
                expect(bridge).toBeDefined();
            });
            it("should have environment", function () {
                expect(bridge.environment).toBeTruthy();
            });
            it("should have resource url", function () {
                expect(bridge.resourceUrl).toBeTruthy();
            });
        });
        describe("RestService", function () {
            it("should be defined", function () {
                expect(bridge.api).toBeDefined();
            });
        });
        describe("SocketService", function () {
            it("should be defined", function () {
                expect(bridge.socket).toBeDefined();
            });
        });
    });
    describe("getOneTimeCode()", function () {
        var bridge;
        beforeEach(function () {
            bridge = new AxelarAssetTransfer_1.AxelarAssetTransfer({
                environment: types_1.Environment.TESTNET,
            });
        });
        describe("on error", function () {
            describe("when called", function () {
                var otc;
                var error;
                beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest.spyOn(bridge.api, "get").mockRejectedValue((0, stubs_1.apiErrorStub)());
                                return [4 /*yield*/, bridge
                                        .getOneTimeCode((0, stubs_1.ethAddressStub)(), (0, stubs_1.uuidStub)())
                                        .catch(function (_error) {
                                        error = _error;
                                    })];
                            case 1:
                                otc = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                describe("api", function () {
                    it("should be called", function () {
                        expect(bridge.api.get).toHaveBeenCalledWith("".concat(__1.CLIENT_API_GET_OTC, "?publicAddress=").concat((0, stubs_1.ethAddressStub)()), (0, stubs_1.uuidStub)());
                    });
                });
                describe("getOneTimeCode()", function () {
                    it("shoud not return", function () {
                        expect(otc).toBeUndefined();
                    });
                    it("should throw", function () {
                        expect(error).toEqual((0, stubs_1.apiErrorStub)());
                    });
                });
            });
        });
        describe("on success", function () {
            describe("when called", function () {
                var otc;
                beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest.spyOn(bridge.api, "get").mockResolvedValue((0, stubs_1.otcStub)());
                                return [4 /*yield*/, bridge.getOneTimeCode((0, stubs_1.ethAddressStub)(), (0, stubs_1.uuidStub)())];
                            case 1:
                                otc = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                describe("api", function () {
                    it("should be called", function () {
                        expect(bridge.api.get).toHaveBeenCalledWith("".concat(__1.CLIENT_API_GET_OTC, "?publicAddress=").concat((0, stubs_1.ethAddressStub)()), (0, stubs_1.uuidStub)());
                    });
                });
                describe("getOneTimeCode()", function () {
                    it("shoud return", function () {
                        expect(otc).toEqual((0, stubs_1.otcStub)());
                    });
                });
            });
        });
    });
    describe("getInitRoomId()", function () {
        var bridge;
        beforeEach(function () {
            bridge = new AxelarAssetTransfer_1.AxelarAssetTransfer({
                environment: types_1.Environment.TESTNET,
            });
        });
        describe("on error", function () {
            describe("when called", function () {
                var roomId;
                var error;
                beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                    var dto;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest.spyOn(bridge.api, "post").mockRejectedValue((0, stubs_1.apiErrorStub)());
                                dto = (0, stubs_1.depositAddressPayloadStub)();
                                return [4 /*yield*/, bridge
                                        .getInitRoomId(dto.fromChain, dto.toChain, dto.destinationAddress, dto.asset, dto.publicAddress, dto.signature, (0, stubs_1.uuidStub)())
                                        .catch(function (_error) {
                                        error = _error;
                                    })];
                            case 1:
                                roomId = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                describe("api", function () {
                    it("should be called", function () {
                        expect(bridge.api.post).toHaveBeenCalledWith(__1.CLIENT_API_POST_TRANSFER_ASSET, (0, stubs_1.depositAddressPayloadStub)(), (0, stubs_1.uuidStub)());
                    });
                });
                describe("getInitRoomId()", function () {
                    it("should throw", function () {
                        expect(error).toEqual((0, stubs_1.apiErrorStub)());
                    });
                    it("shoud return", function () {
                        expect(roomId).toBeUndefined();
                    });
                });
            });
        });
        describe("on success", function () {
            describe("when called", function () {
                var roomId;
                beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                    var dto;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest.spyOn(bridge.api, "post").mockResolvedValue({
                                    data: (0, stubs_1.roomIdStub)(),
                                });
                                dto = (0, stubs_1.depositAddressPayloadStub)();
                                return [4 /*yield*/, bridge.getInitRoomId(dto.fromChain, dto.toChain, dto.destinationAddress, dto.asset, dto.publicAddress, dto.signature, (0, stubs_1.uuidStub)())];
                            case 1:
                                roomId = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                describe("api", function () {
                    it("should be called", function () {
                        expect(bridge.api.post).toHaveBeenCalledWith(__1.CLIENT_API_POST_TRANSFER_ASSET, (0, stubs_1.depositAddressPayloadStub)(), (0, stubs_1.uuidStub)());
                    });
                });
                describe("getInitRoomId()", function () {
                    it("shoud return", function () {
                        expect(roomId).toBe((0, stubs_1.roomIdStub)().roomId);
                    });
                });
            });
        });
    });
    describe("getLinkEvent()", function () {
        var bridge;
        beforeEach(function () {
            bridge = new AxelarAssetTransfer_1.AxelarAssetTransfer({
                environment: types_1.Environment.TESTNET,
            });
        });
        describe("on error", function () {
            describe("when called", function () {
                var roomId;
                var error;
                beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest
                                    .spyOn(bridge.socket, "joinRoomAndWaitForEvent")
                                    .mockRejectedValue((0, stubs_1.apiErrorStub)());
                                return [4 /*yield*/, bridge
                                        .getLinkEvent((0, stubs_1.roomIdStub)().roomId)
                                        .catch(function (_error) {
                                        error = _error;
                                    })];
                            case 1:
                                roomId = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                describe("api", function () {
                    it("should be called", function () {
                        expect(bridge.socket.joinRoomAndWaitForEvent).toHaveBeenCalledWith((0, stubs_1.roomIdStub)().roomId);
                    });
                });
                describe("getLinkEvent()", function () {
                    it("should throw", function () {
                        expect(error).toEqual((0, stubs_1.apiErrorStub)());
                    });
                    it("shoud return", function () {
                        expect(roomId).toBeUndefined();
                    });
                });
            });
        });
        describe("on success", function () {
            describe("when called", function () {
                var roomId;
                beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest
                                    .spyOn(bridge.socket, "joinRoomAndWaitForEvent")
                                    .mockResolvedValue((0, stubs_1.linkEventStub)());
                                return [4 /*yield*/, bridge.getLinkEvent((0, stubs_1.roomIdStub)().roomId)];
                            case 1:
                                roomId = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                describe("api", function () {
                    it("should be called", function () {
                        expect(bridge.socket.joinRoomAndWaitForEvent).toHaveBeenCalledWith((0, stubs_1.roomIdStub)().roomId);
                    });
                });
                describe("getInitRoomId()", function () {
                    it("shoud return", function () {
                        expect(roomId).toEqual((0, stubs_1.newRoomIdStub)());
                    });
                });
            });
        });
    });
    describe("getDepositAddress()", function () {
        var bridge;
        beforeEach(function () {
            bridge = new AxelarAssetTransfer_1.AxelarAssetTransfer({
                environment: types_1.Environment.TESTNET,
            });
        });
        describe("when called", function () {
            var fromChain = "terra";
            var toChain = "avalanche";
            var depositAddress = "0xF16DfB26e1FEc993E085092563ECFAEaDa7eD7fD";
            var asset = "uusd";
            var response;
            beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            jest.spyOn(bridge, "getOneTimeCode").mockResolvedValue((0, stubs_1.otcStub)());
                            jest
                                .spyOn(bridge, "getInitRoomId")
                                .mockResolvedValue((0, stubs_1.roomIdStub)().roomId);
                            jest
                                .spyOn(bridge, "getLinkEvent")
                                .mockResolvedValue((0, stubs_1.linkEventStub)().newRoomId);
                            return [4 /*yield*/, bridge.getDepositAddress(fromChain, toChain, depositAddress, asset)];
                        case 1:
                            response = _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should return deposit address", function () {
                expect(response).toBe(JSON.parse((0, stubs_1.newRoomIdStub)())["depositAddress"]);
            });
        });
    });
});
//# sourceMappingURL=AxelarAssetTransfer.spec.js.map