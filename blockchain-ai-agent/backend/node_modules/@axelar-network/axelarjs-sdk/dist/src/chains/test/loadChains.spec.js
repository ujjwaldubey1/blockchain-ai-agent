"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var mock = {
    loadChains: __1.loadChains,
};
describe("loadChains()", function () {
    beforeEach(function () {
        jest.clearAllMocks();
        jest.spyOn(mock, "loadChains");
    });
    describe("when loadChains is called with known env, but not mainnet", function () {
        beforeEach(function () {
            mock.loadChains({
                environment: "testnet",
            });
        });
        test("then it should call loadChains", function () {
            expect(mock.loadChains).toHaveBeenCalledWith({ environment: "testnet" });
        });
        test("then it should return assets", function () {
            expect(mock.loadChains).toHaveReturned();
        });
    });
    describe("when loadChains is called with mainnet", function () {
        beforeEach(function () {
            mock.loadChains({
                environment: "mainnet",
            });
        });
        test("then it should call loadChains", function () {
            expect(mock.loadChains).toHaveBeenCalledWith({ environment: "mainnet" });
        });
        test("then it should return assets", function () {
            expect(mock.loadChains).toHaveReturned();
        });
    });
    describe("when loadChains is called with unknown envs", function () {
        var error;
        beforeEach(function () {
            try {
                mock.loadChains({
                    environment: "axelar",
                });
            }
            catch (_error) {
                error = _error;
            }
        });
        test("then it should call loadChains", function () {
            expect(mock.loadChains).toHaveBeenCalledWith({ environment: "axelar" });
        });
        test("then it should return assets", function () {
            expect(error.name).toBe("Environment not allowed");
            expect(error.message).toBe("Provided environment axelar not in local|devnet|testnet|mainnet");
        });
    });
    describe("when loadChains is called with empty env", function () {
        var error;
        beforeEach(function () {
            try {
                mock.loadChains({
                    environment: "",
                });
            }
            catch (_error) {
                error = _error;
            }
        });
        test("then it should call loadChains", function () {
            expect(mock.loadChains).toHaveBeenCalledWith({ environment: "" });
        });
        test("then it should return assets", function () {
            expect(error.name).toBe("Environment not allowed");
            expect(error.message).toBe("Provided environment undefined not in local|devnet|testnet|mainnet");
        });
    });
});
//# sourceMappingURL=loadChains.spec.js.map