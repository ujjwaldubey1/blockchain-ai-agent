"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadChains = void 0;
var Axelar_1 = __importDefault(require("./Axelar"));
var Ethereum_1 = __importDefault(require("./Ethereum"));
var Avalanche_1 = __importDefault(require("./Avalanche"));
var Terra_1 = __importDefault(require("./Terra"));
var Fantom_1 = __importDefault(require("./Fantom"));
var Polygon_1 = __importDefault(require("./Polygon"));
var Moonbeam_1 = __importDefault(require("./Moonbeam"));
var Osmosis_1 = __importDefault(require("./Osmosis"));
var Cosmoshub_1 = __importDefault(require("./Cosmoshub"));
var Injective_1 = __importDefault(require("./Injective"));
var Juno_1 = __importDefault(require("./Juno"));
var assets_1 = require("../assets");
var lodash_1 = require("lodash");
var Crescent_1 = __importDefault(require("./Crescent"));
var EMoney_1 = __importDefault(require("./EMoney"));
var Binance_1 = __importDefault(require("./Binance"));
var Kujira_1 = __importDefault(require("./Kujira"));
var Sei_1 = __importDefault(require("./Sei"));
function loadChains(config) {
    var allAssets = (0, assets_1.loadAssets)(config);
    var _environment = config.environment;
    var rawChains = [
        new Axelar_1.default(),
        new Avalanche_1.default(),
        new Binance_1.default(),
        new Cosmoshub_1.default(),
        new Crescent_1.default(),
        new Ethereum_1.default(),
        new EMoney_1.default(),
        new Fantom_1.default(),
        new Injective_1.default(),
        new Juno_1.default(),
        new Kujira_1.default(),
        new Moonbeam_1.default(),
        new Osmosis_1.default(),
        new Polygon_1.default(),
        new Sei_1.default(),
        new Terra_1.default(),
    ];
    /*push assets to supported chains*/
    rawChains.forEach(function (_a) {
        var chainInfo = _a.chainInfo;
        var filteredAssetList = allAssets.filter(function (_a) {
            var chain_aliases = _a.chain_aliases;
            return Object.keys(chain_aliases).indexOf(chainInfo.chainName.toLowerCase()) >
                -1;
        });
        var assetsList = [];
        filteredAssetList.forEach(function (asset) {
            var assetToPush = (0, lodash_1.cloneDeep)(asset.chain_aliases[chainInfo.chainName.toLowerCase()]);
            assetToPush.common_key =
                asset.common_key[_environment === "local" ? "testnet" : _environment];
            assetToPush.native_chain = asset.native_chain;
            assetToPush.decimals = asset.decimals;
            assetToPush.fullySupported = asset.fully_supported;
            assetsList.push(assetToPush);
        });
        chainInfo.assets = assetsList;
    });
    return rawChains;
}
exports.loadChains = loadChains;
//# sourceMappingURL=index.js.map