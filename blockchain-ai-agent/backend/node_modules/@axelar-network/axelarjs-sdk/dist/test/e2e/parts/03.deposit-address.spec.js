"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../src");
exports.default = () => {
    describe("Deposit Address e2e", () => {
        let axelar;
        beforeAll(() => {
            axelar = new src_1.AxelarAssetTransfer({
                environment: src_1.Environment.TESTNET,
                overwriteResourceUrl: "http://localhost:4000",
            });
        });
        describe("concurrent calls", () => {
            jest.setTimeout(30000);
            it("addresses should be different", () => __awaiter(void 0, void 0, void 0, function* () {
                const [address1, address2] = yield Promise.all([
                    axelar.getDepositAddress("osmosis", "avalanche", "0xF16DfB26e1FEc993E085092563ECFAEaDa7eD7fD", "uusdc"),
                    axelar.getDepositAddress("avalanche", "osmosis", "osmo1tck82gz5v5rzc74hmf8j9vyjcs3nnnycr7es2q", "uusdc"),
                ]);
                expect(address1).not.toEqual(address2);
            }));
        });
        describe("getting deposit address - Terra -> Avalanche", () => {
            jest.setTimeout(30000);
            let response;
            const destinationAddress = "0xF16DfB26e1FEc993E085092563ECFAEaDa7eD7fD";
            beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
                response = yield axelar.getDepositAddress("Terra", "Avalanche", destinationAddress, "uusd");
            }));
            it("should get response", () => {
                expect(response).toBeTruthy();
                expect(typeof response).toBe("string");
            });
        });
        describe("getting deposit address - Avalanche -> Terra", () => {
            jest.setTimeout(30000);
            let response;
            const destinationAddress = "terra1qem4njhac8azalrav7shvp06myhqldpmkk3p0t";
            beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
                response = yield axelar.getDepositAddress("Avalanche", "Terra", destinationAddress, "uusd");
            }));
            it("should get response", () => {
                expect(response).toBeTruthy();
                expect(typeof response).toBe("string");
            });
        });
    });
};
//# sourceMappingURL=03.deposit-address.spec.js.map